apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-models-weights
  annotations:
    csi.storage.k8s.io/node-publish-secret-name: test-secrets-pvc-obs
    csi.storage.k8s.io/node-publish-secret-namespace: default
    volume.beta.kubernetes.io/storage-provisioner: everest-csi-provisioner
    everest.io/obs-volume-type: standard
    csi.storage.k8s.io/fstype: obsfs
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: csi-obs #
  resources:
    requests:
      storage: 3Ti 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-models-logs
  annotations:
    csi.storage.k8s.io/node-publish-secret-name: test-secrets-pvc-obs
    csi.storage.k8s.io/node-publish-secret-namespace: default
    volume.beta.kubernetes.io/storage-provisioner: everest-csi-provisioner
    everest.io/obs-volume-type: standard
    csi.storage.k8s.io/fstype: obsfs
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: csi-obs #
  resources:
    requests:
      storage: 1Gi 
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: APP_PLACEHOLDER
spec:
    replicas: 1
    selector:
        matchLabels:
          app: APP_PLACEHOLDER
    template:
        metadata:
          labels:
            app: APP_PLACEHOLDER
        spec:
            nodeSelector:
              node_name: new-jina-embedding
            volumes:
              - name: pvc-models-weights-data
                persistentVolumeClaim:
                  claimName: pvc-models-weights
              - name: pvc-models-logs-data
                persistentVolumeClaim:
                  claimName: pvc-models-logs
            containers:
              - name: APP_PLACEHOLDER
                #donot remove REGISTRY_IMAGE_PLACEHOLDER and REGISTRY_IMAGE_TAG_PLACEHOLDER, else ci cd pipeline will not run properly
                image: REGISTRY_IMAGE_PLACEHOLDER:REGISTRY_IMAGE_TAG_PLACEHOLDER
                imagePullPolicy: Always
                command: ["/home/server/start_server.sh"]
                volumeMounts:
                - mountPath: /home/download/
                  name: pvc-models-weights-data
                - mountPath: /home/logs/jina/
                  name: pvc-models-logs-data
                ports:
                - containerPort: 8080
                env:
                - name: CUDA_VISIBLE_DEVICES
                  value: '0,1'
                - name: DEPLOY_MODEL_NAME
                  value: 'jina-embeddings-v2-base-de'
                - name: MODEL_FOLDER
                  value: '/home/download/models/jina'
                - name: DEPLOY_PORT
                  value: '8080'
                resources:
                  limits:
                    nvidia.com/gpu: 2
                    cpu: "14"
                    memory: "56Gi"
            imagePullSecrets:
              - name: IMAGE_PULL_SECRET_PLACEHOLDER
                    
---    

apiVersion: v1
kind: Service
metadata:
  name: APP_PLACEHOLDER
spec:
  selector:
    app: APP_PLACEHOLDER
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: APP_PLACEHOLDER
#spec:
#  ingressClassName: nginx
#  rules:
#    - host: APP_URL_PLACEHOLDER
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: APP_PLACEHOLDER
#                port:
#                  number: 8080
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: APP_PLACEHOLDER
#  annotations:
#    cert-manager.io/cluster-issuer: letsencrypt-prod
#    kubernetes.io/ingress.class: nginx
#    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#spec:
#  ingressClassName: nginx
#  rules:
#  - host: APP_URL_PLACEHOLDER
#    http:
#      paths:
#      - path: /
#        pathType: Prefix
#        backend:
#          service:
#            name: APP_PLACEHOLDER
#            port:
#              number: 8080
#  tls:
#  - hosts:
#    - APP_URL_PLACEHOLDER
#    secretName: APP_URL_PLACEHOLDER-tls
